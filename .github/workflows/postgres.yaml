# name: PostgreSQL service example
# on: push

# jobs:
#   # Label of the container job
#   container-job:
#     # Containers must run in Linux based operating systems
#     runs-on: ubuntu-latest
#     # Docker Hub image that `container-job` executes in
#     container: node:10.18-jessie

#     # Service containers to run with `container-job`
#     services:
#       # Label used to access the service container
#       postgres:
#         # Docker Hub image
#         image: postgres
#         # Provide the password for postgres
#         env:
#           POSTGRES_PASSWORD: postgres
#         # Set health checks to wait until postgres has started
#         options: >-
#           --health-cmd pg_isready
#           --health-interval 10s
#           --health-timeout 5s
#           --health-retries 5
#     steps:
#       # Downloads a copy of the code in your repository before running CI tests
#       - name: Check out repository code
#         uses: actions/checkout@v2

#       # Performs a clean installation of all dependencies in the `package.json` file
#       # For more information, see https://docs.npmjs.com/cli/ci.html
#       - name: Install dependencies
#         run: npm i

#       - name: Connect to PostgreSQL
#         # Runs a script that creates a PostgreSQL client, populates
#         # the client with data, and retrieves data
#         run: node client.js
#         # Environment variable used by the `client.js` script to create a new PostgreSQL client.
#         env:
#           # The hostname used to communicate with the PostgreSQL service container
#           POSTGRES_HOST: postgres
#           # The default PostgreSQL port
#           POSTGRES_PORT: 5432

# This workflow will do a clean install of node dependencies, build the source code and run tests across different versions of node
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-nodejs-with-github-actions

name: task

on:
  push:
    branches: [ task ]

jobs:
  build:
    services:
      # nats:
      #   image: nats
      #   ports:
      #     - 4222:4222
      # redis:
      #   image: redis
      #   options: >-
      #     --health-cmd "redis-cli ping"
      #     --health-interval 10s
      #     --health-timeout 5s
      #     --health-retries 5
      #   ports:
      #     - 6379:6379
      # minio:
      #   image: bitnami/minio:latest
      #   env:
      #     MINIO_ACCESS_KEY: ${{ secrets.MINIO_ACCESS_KEY }}
      #     MINIO_SECRET_KEY: ${{ secrets.MINIO_SECRET_KEY }}
      #   ports:
      #     - 9000:9000
      #   options: --name minio-server
      postgres:
        image: postgres:11
        env:
          POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
          POSTGRES_DB: ${{ secrets.POSTGRES_DB }}
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    runs-on: ubuntu-latest
    env:
      tm_database__password: ${{ secrets.POSTGRES_PASSWORD }}
      tm_database__database: ${{ secrets.POSTGRES_DB }}
    steps:
      # Downloads a copy of the code in your repository before running CI tests
      - name: Check out repository code
        uses: actions/checkout@v2

      # Performs a clean installation of all dependencies in the `package.json` file
      # For more information, see https://docs.npmjs.com/cli/ci.html
      - name: Install dependencies
        run: npm i

      - name: Connect to PostgreSQL
        # Runs a script that creates a PostgreSQL client, populates
        # the client with data, and retrieves data
        run: node client.js
        # Environment variable used by the `client.js` script to create a new PostgreSQL client.
        env:
          # The hostname used to communicate with the PostgreSQL service container
          POSTGRES_HOST: postgres
          # The default PostgreSQL port
          POSTGRES_PORT: 5432
          
      # tm_server__workerPort: ${{ secrets.WORKER_PORT }}
      # tm_server__taskPort: ${{ secrets.TASK_PORT }}
      # tm_server__performancePort: ${{ secrets.PERFORMANCE_PORT }}
      # tm_minio__accessKey: ${{ secrets.MINIO_ACCESS_KEY }}
      # tm_minio__secretKey: ${{ secrets.MINIO_SECRET_KEY }}
    # defaults:
    #   run:
    #     working-directory: ./tugas
    # steps:
    # - uses: actions/checkout@v2
    # - name: Use Node.js 14
    #   uses: actions/setup-node@v1
    #   with:
    #     node-version: 14
    # - name: Cache node modules
    #   uses: actions/cache@v2
    #   env:
    #     cache-name: cache-node-modules
    #   with:
    #     # npm cache files are stored in `~/.npm` on Linux/macOS
    #     path: ~/.npm
    #     key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
    #     restore-keys: |
    #       ${{ runner.os }}-build-${{ env.cache-name }}-
    #       ${{ runner.os }}-build-
    #       ${{ runner.os }}-
    # - name: Run Install Dependencies
    #   run: npm i
    # - name: Run Test Linter
    #   run: npm run lint
    # - name: Run Integration Test
    #   run: npm run test:tasks
